{
  "hash": "76180d40d61779de4d4142508a01a23d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Data Visualization in R\"\nformat: html\nauthor:   \n  - Justin Millar \n  - Ellie Sherrard-Smith\ndate: \"2024-07-19\"\n---\n\n\n\n\n## Getting Started\n\nBefore you begin, you might want to create a new project in RStudio. This can be done by clicking on the \"New Project\" button in the upper right corner of the RStudio window. You can then name the project and choose a directory to save it in.\n\nNext, we will load the `tidyverse` package. This package provides a set of useful functions for data manipulation and visualization. We will use the `ggplot2` package to create plots in the later section of this tutorial.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nNext, let's download the two example datasets we will use in this tutorial. These are avialable in the [AMMnet Hackathon GitHub repository](https://github.com/AMMnet/AMMnet-Hackathon). \n\nI suggest creating a `data` folder inside your R project, then we can download the two example datasets so that they are saved to your computer.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data folder\ndir.create(\"data\")\n\n# Download example data\nurl <- \"https://raw.githubusercontent.com/AMMnet/AMMnet-Hackathon/main/01_data-vis/data/\"\n\ndownload.file(paste0(url, \"mockdata_cases.csv\"), destfile = \"data/mockdata_cases.csv\")\ndownload.file(paste0(url, \"mosq_mock.csv\"), destfile = \"data/mosq_mock.csv\")\n\n# Load example data\nmalaria_data   <- read_csv(\"data/mockdata_cases.csv\")\nmosquito_data  <- read_csv(\"data/mosq_mock.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nThe two datasets we will use are `mockdata_cases.csv` and `mosq_mock.csv`, which are mock example datasets that should be similar to malaria case surviellance and mosquito field collection data, respectively. In the following sections we will use the `mockdata_cases.csv` to introduce concepts of data visualization in R. The `mosq_mock.csv` dataset is used in the challenge sections.\n\n## Characterizing our data\n\nBefore we start visualizing our data, we need to understand the\ncharacteristics of our data. The goal is to get an idea of the \ndata structure and to understand the relationships between variables.\n\nHere are some functions that can help us understand the structure of our data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore the structure and summary of the datasets\ndim(malaria_data)  \nhead(malaria_data)\nsummary(malaria_data)\n```\n:::\n\n\n\n\nWe should also explore individual columns/variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmalaria_data$location          # values for a single column\nunique(malaria_data$location)  # unique values for a single column\ntable(malaria_data$location)   # frequencies for a single column\ntable(malaria_data$location, malaria_data$ages)  # frequencies for multiple columns\n```\n:::\n\n\n\n\nFinally, we should check for missing values in each column, as these can affect our visualizations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(malaria_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n::: {#challenge1 .callout-tip}\n## Challenge 1: Explore the structure and summary of the `mosquito_data` dataset\n* What are the dimensions of the dataset?\n* What are the column names?\n* What are the column types?\n* What are some key variables or relationships that we can explore?\n:::\n\n## Exploratory Visualizations Using Base R Functions\n\nFirst, we will look at some exploratory data visualization\ntechniques using base R functions. The purpose of these plots \nis to help us understand the relationships between variables and \ncharacteristics of our data. They are useful for quickly exploring\nthe data and understanding the relationships, but they are not\nare not great for sharing in scientific publications/presentations.\n\n### Single variable comparison\n\nFor one variable comparison, we can use `hist()` function to create a histogram.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(malaria_data$prev)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/histogram-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(malaria_data$prev, \n    breaks = 10, \n    main = \"Distribution of Malaria Prevalence\",\n    xlab = \"Malaria Prevalence\",\n    ylab = \"Frequency\",\n    col = \"lightblue\",\n    border = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/histogram-2.png){width=672}\n:::\n:::\n\n\n\n\nAnnother useful function for single variable comparisons is `barplot()`. In this case, we will use the `table()` function to count the number of observations in each category, then use `barplot()` to create a barplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table(malaria_data$ages))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/barplot-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbarplot(table(malaria_data$location))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/barplot-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbarplot(table(malaria_data$year))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/barplot-3.png){width=672}\n:::\n:::\n\n\n\n\n### Multiple variables\n\nFor multiple variables, we can use `plot()` function to create a scatterplot. In this case, we will use the `S` operator to pull out an individual column from the dataset. Then we will use `plot()` to create a scatterplot. The first argument in `plot()` is the `x` variable, and the second argument is the `y` variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(malaria_data$total, malaria_data$positive)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(malaria_data$month, malaria_data$prev)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-2.png){width=672}\n:::\n:::\n\n\n\n\nWe can also create boxplots by using `boxplot()` function. In this function we use the `~` operator, which tells R to use the values on the lefthand side of the `~` as the `x` variable and the righthand side of the `~` as the `y` variable. I think of `~` as \"in terms of\", and for boxplots this means that your numerical variable will be on the `x` axis and the categorical variable will be on the `y` axis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(malaria_data$prev ~ malaria_data$month) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/boxplot-1.png){width=672}\n:::\n\n```{.r .cell-code}\nboxplot(malaria_data$prev ~ malaria_data$location) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/boxplot-2.png){width=672}\n:::\n:::\n\n\n\n\n::: {#challenge2 .callout-tip}\n## Challenge 2: Explore the structure and summary of the `mosquito_data` dataset\n* Are their any interesting patterns in individual variables/columns?\n* Are there any relationships between variables/columns?\n:::\n\n## Data Visualization with ggplot2\n\nBase R functions like `hist()` and `barplot()` are great for quickly exploring our data, but we may want to use more powerful visualization techniques when preparing outputs for scientific reports, presentations, and publications.\n\nThe `ggplot2` package is a popular visualization package for R. It provides\nan easy-to-use interface for creating data visualizations. The ggplot2\npackage is based on the \"grammar of graphics\" and is a powerful way to\ncreate complex visualizations that are useful for creating scientific\nand publication-quality figures.\n\nThe \"grammar of graphics\" used in ggplot2 is a set of rules that are\nused to develop data visualizations using a layering approach. Layers\nare added using the '+' operator.\n\n### Components of a ggplot\nThere are three main components of a ggplot:\n1. The data: the dataset we want to visualize\n2. The aesthetics: the visual properties from the data used in the plot\n3. The geometries: the visual representations of the data (e.g., points, lines, bars)\n\n#### The data\nAll ggplot2 plots require a data frame as input. Just running this\nline will produce a blank plot because we have stated which elements\nfrom the data we want to visualize or how we want to visualize them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-data-1.png){width=672}\n:::\n:::\n\n\n\n\n#### The aesthetics\nNext, we need to specify the visual properties of the plot that are\ndetermined by the data. The aesthetics are specified using the `aes()`\nfunction. The output should now produce a blank plot but with\ndetermined visual properties (e.g., axes labels).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-1.png){width=672}\n:::\n:::\n\n\n\n\n#### The geometries\nFinally, we need to specify the visual representation of the data. The  geometries are specified using the `geom_*` function. There are many different types of geometries that can be used in ggplot2. We will use `geom_point()` in this example and we will append it to the previous plot using the `+` operator. The output should now produce a plot with the specified visual representation of the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-1.png){width=672}\n:::\n:::\n\n\n\n\nHere are some examples of different `geom` functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = prev)) +\n  geom_histogram(bins = 20)  # the \"bins\" argument specifies the number of bars\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-examples-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = year)) +\n  geom_bar(fill = \"tomato\")  # the \"fill\" argument specifies the color of the bars\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-examples-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2)  # geom_jitter adds jittered points to the plot, and \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-examples-3.png){width=672}\n:::\n\n```{.r .cell-code}\n                            # the \"alpha\" argument specifies the transparency\n\nggplot(data = malaria_data, aes(x = location, y = prev)) +\n  geom_violin() +          # Violin plot are similar to boxplots, but illustrate \n  geom_jitter(alpha = 0.2) # the distribution of the data\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-examples-4.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")  # The smooth geom add a smoothed line to the plot, \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-geom-examples-5.png){width=672}\n:::\n\n```{.r .cell-code}\n                              # using the \"lm\" or other methods\n```\n:::\n\n\n\n\n### Extending the aesthetics\nAdditional visual properties, such as color, size, and shape, can be defined from our input data using the `aes()` function. Here is an example of adding color to a previous plot using the color aesthetic.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive, color = location)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-color-1.png){width=672}\n:::\n:::\n\n\n\n\nNote that this is different then defining a color directly within the `geom_point()`, which would only apply a single color to all points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive)) +\n  geom_point(color = \"tomato\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-color-examples-1.png){width=672}\n:::\n:::\n\n\n\n\nWhen using the `aes()` function, the visual properties will be determined by a variable in the dataset. This allows us to visualize relationships between multiple variables at the same time.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = prev, fill = ages)) +\n  geom_histogram(color = \"black\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-multiple-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-multiple-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive, color = location), alpha = 0.5) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-multiple-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = xcoord, y = ycoord, color = location)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-aes-multiple-4.png){width=672}\n:::\n:::\n\n\n\n\n::: {#challenge3 .callout-tip}\n## Challenge 3: Create ggplot2 visualizations of the 'mosquito_data' dataset\n* Are their any interesting patterns in individual variables/columns?\n* How can we use the aes() function to view multiple variables in a single plot?\n* Are there any additional geometries that may be useful for visualizing this dataset?\n:::\n\n## Customizing `ggplot` Graphics for Presentation and Communication\n\nIn this section, we will using additional features of ggplot2 to customize and develop high-quality plots that can used in scientific publications and presentations.\n\n### Themes\nThere are many different themes that can be used in ggplot2. \nThe \"theme\" function is used to specify the theme of the plot. There are many\npreset theme functions, and further custom themes can be created using the \ngeneric theme() function.\n\nTypically you will want to set the theme at the end of your plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-theme-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-theme-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = ages)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-theme-3.png){width=672}\n:::\n:::\n\n\n\n\n### Labels\n\nLabels can be added to various components of a plot using the labs() function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = ages)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-labs-1.png){width=672}\n:::\n:::\n\n\n\n\n ### Custom color palettes\n\nThere are many different color palettes that can be used in ggplot2. \nThe \"scale_color\" function is used to specify the color of the plot. There are many\npreset color palettes, and further custom color palettes can be created using the \ngeneric `scale_color()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  scale_fill_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-colorscale-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also set our own colors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  scale_fill_manual(values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-colorscale-custom-1.png){width=672}\n:::\n:::\n\n\n\n\nThe examples above show how to use colors for categorical variables, but we can also use custom color palettes for continuous variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  scale_color_gradient(low = \"blue\", high = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-colorscale-continuous-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  # use viridis package to create custom color palettes\n  scale_color_viridis_c(option = \"magma\")  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-colorscale-continuous-2.png){width=672}\n:::\n:::\n\n\n\n\n### Facets\n\nFacets are a powerful feature of ggplot2 that allow us to create multiple plots\nbased on a single variable. This \"small multiple\" approach is another effective\nway to visualize relationships between mutliple variables.\n\nFacets also make use of the `~` operator.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = total, y = positive, color = prev)) +\n  geom_point() +\n  scale_color_viridis_c(option = \"magma\") +\n  facet_wrap(~ location)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-facets-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  facet_wrap(~ ages) +\n  coord_flip() +  # flips the x and y axes\n  scale_fill_manual(\n    values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\")) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\ntheme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-facets-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = prev, fill = ages)) +\n  geom_histogram(bins = 10) +\n  scale_fill_viridis_d() +\n  facet_grid(year ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-facets-3.png){width=672}\n:::\n:::\n\n\n\n\n### Exporting plots\n\nWe can export plots to a variety of formats using the `ggsave()` function. We can specify which plot to export by saving in an object and then calling the object in the `ggsave()` function, otherwise `ggsave()` will save the current/last plot. The width and height of the output image using the `width` and `height` can be set using the `width` and `height` arguments, and the resolution of the image using the `dpi` argument.\n\nThe file type can be set using the `format` argument, or by using a specific file extension. I recommend using informative names for the output file so that it is easily identifiable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = malaria_data, aes(x = location, y = prev, fill = location)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.2) +\n  facet_wrap(~ ages) +\n  coord_flip() +  # flips the x and y axes\n  scale_fill_manual(values = c(\"#C6E0FF\", \"#136F63\", \"#E0CA3C\", \"#F34213\", \"#3E2F5B\")) +\n  labs(title = \"Malaria prevalence by location and age group\",\n       subtitle = \"Data from 2018 - 2020\",\n       x = \"Location\",\n       y = \"Prevalence\",\n       fill = \"Age group\") +\ntheme_classic()\n\nggsave(\"malaria-prevalence-age-boxplot.png\", width = 10, height = 6, dpi = 300)\n```\n:::\n\n\n\n\n::: {#challenge4 .callout-tip}\n## Challenge 4: Develop customized ggplot figures for the 'mosquito_data' dataset\n* Test customs themes on your previous plots, consider looking for new packages with more themes\n* Apply custom color palettes to your plots, explore additional color palettes and packages\n* Use facets to visualize relationships between multiple variables\n:::\n\n## Final Challenges\n\nCHALLENGE 1: Create a figure showing how the Anopheles gambiae total counts vary each day and by location.\n\nCHALLENGE 2: Create a figure showing the hourly Anopheles gambiae total counts each hour.\n\n## Conclusion and Resources\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}